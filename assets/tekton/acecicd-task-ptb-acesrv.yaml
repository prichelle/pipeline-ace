apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pack-test-build-aceserver
spec:
  params:
    - default: image-registry.openshift-image-registry.svc:5000/ace/ace-minimal:12.0.2
      description: aceserver image
      name: ACE_IMAGE
      type: string
    - default: image-registry.openshift-image-registry.svc:5000/ace/ace-mvn:1.0
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: 'false'
      description: Verify the TLS on the registry endpoint
      name: TLSVERIFY
      type: string
    - name: namespace
      default: ace
      description: namespace used to build the image url
    - name: ACE_APP_NAME
      description: name of the ace application to build in the git repo.
      default: HelloWorld
      type: string
    - name: IMG_NAME
      description: name of the image that will be pushed in the registry
      default: ace-helloword
      type: string
    - name: IMG_TAG
      description: tag value to used to tag the image that will be pushed.
      default: "1.0"
      type: string
  results:
    - name: image_tag
      description: tag from git acecfg for image
    - name: image_name
      description: name from git acecfg for image
  resources:
    inputs:
      - name: source
        type: git
      - name: image
        type: image
  steps:
    - name: prepare-bar
      image: $(params.ACE_IMAGE)
      script: |
        #!/bin/bash
        echo ">- V1.0 "
        echo ">- preparing bar file"
        export LICENSE="accept"
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        ls -la
        echo ">- removing existing bar files"
        rm bars/*
        aceappname=$(params.ACE_APP_NAME)
        echo ">- building Integration bar file for application $aceappname"
        cd source
        mqsipackagebar -a ../bars/Integration.bar -k $aceappname
        [ $? -ne 0 ] && exit 2
        if [[ -e "$aceappname/$aceappname.properties" ]]
        then
          echo ">- applying properties to the bar file"
          mqsiapplybaroverride -b ../bars/Integration.bar -k $aceappname -p $aceappname/$aceappname.properties -o ../bars/IntegrationOver.bar
          rm ../bars/Integration.bar
          mv ../bars/IntegrationOver.bar ../bars/Integration.bar
          echo ">- property set"
          cat $aceappname/$aceappname.properties
        fi
        ls ../bars
        
      securityContext:
        privileged: true
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
    - name: run-unittest
      image: $(params.BUILDER_IMAGE)
      script: |
        #!/bin/bash
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        export JAVA_HOME=/opt/ibm/ace-12/common/jdk
        export PATH=/opt/ibm/ace-12/common/jdk/bin:$PATH
        echo ">- running unit test"
        echo "MQSI path: $MQSI_BASE_FILEPATH"
        . ./imgcfg

        mkdir maven-out
        echo ">- compiling test project $unittestprj using maven"
        cd source/$unittestprj
        /opt/apache-maven-3.6.3/bin/mvn --no-transfer-progress -Dinstall.work.directory=../maven-output install
        echo ">- jar file generated"
        ls -la *.jar
        echo ">- prepare test server ACE_UnitTest_Srv"
        cd ../..
        mkdir ACE_UnitTest_Srv
        mqsicreateworkdir ACE_UnitTest_Srv
        mkdir ACE_UnitTest_Srv/run/UnitTestProject
        mkdir ACE_UnitTest_Srv/run/UnitTestProject/resources
        echo ">- copying unittest jar, descriptor and resources"
        cp source/$unittestprj/$unittestprj-maven.jar ACE_UnitTest_Srv/run/UnitTestProject
        cp source/$unittestprj/testproject.descriptor ACE_UnitTest_Srv/run/UnitTestProject
        cp source/$unittestprj/src/main/resources/* ACE_UnitTest_Srv/run/UnitTestProject/resources
        echo ">- copying previous compiled Integration bar file"
        cp bars/Integration.bar ACE_UnitTest_Srv/run

        echo ">- running unit test"
        IntegrationServer --work-dir ACE_UnitTest_Srv --no-nodejs --test-project UnitTestProject --start-msgflows false --http-port-number -1 --admin-rest-api -1
      securityContext:
        privileged: true
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
    - name: build-push-acesrv
      image: gcr.io/kaniko-project/executor:v0.16.0
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
        - name: "SSL_CERT_DIR"
          value: "/tmp/other-ssl-dir"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.DOCKERFILE)
        - --destination=$(resources.inputs.image.url)/$(params.namespace)/$(params.IMG_NAME):$(params.IMG_TAG)
        - --context=.
        - --build-arg=BASE_IMAGE=$(resources.inputs.image.url)/$(params.namespace)/$(params.IMG_NAME):$(params.IMG_TAG)
        - --skip-tls-verify
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
  volumes:
    - emptyDir: {}
      name: varlibcontainers